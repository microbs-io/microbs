load_module /etc/nginx/modules/otel_ngx_module.so;

events {}

http {
  opentelemetry_config /etc/nginx/otel-nginx.toml;
  resolver kube-dns.kube-system.svc.cluster.local;
  access_log off;

  map $time_iso8601 $ts1 {
    ~([^+]+) $1;
  }
  map $msec $ts2 {
    ~\.([0-9]+)$ $1Z;
  }

  log_format logfmt 'ts=$ts1.$ts2 level=info msg="$request_method $uri" ip=$remote_addr method=$request_method path=$uri status=$status traceID=$opentelemetry_trace_id spanID=$opentelemetry_span_id';

  server {
    listen 80;
    server_name localhost;
    access_log /var/log/nginx/access.log logfmt;

    # Handle API requests
    # Path format: /api/v1/<service_name>/<service_path>
    location ~ ^/api/v1/([^/]+)/(.+)$ {
      opentelemetry_operation_name "/api/v1/:service_name/:service_path";
      opentelemetry_propagate;
      proxy_pass http://$1.default.svc.cluster.local/$2;
    }

    # Handle API requests with empty paths
    # Path format: /api/v1/<service_name>
    location ~ ^/api/v1/([^/]+)/*$ {
      opentelemetry_operation_name "/api/v1/:service_name";
      opentelemetry_propagate;
      proxy_pass http://$1.default.svc.cluster.local/;
    }

    # Handle liveness and readiness probes
    location ~ ^/healthz/*$ {
      add_header Access-Control-Allow-Origin * always;
      opentelemetry_operation_name "/healthz";
      opentelemetry_propagate;
      return 200 '{"healthy":true}';
    }

    # Handle base path
    location ~ ^/*$ {
      add_header Access-Control-Allow-Origin * always;
      opentelemetry_operation_name "/";
      opentelemetry_propagate;
      return 200 '{"message":"GET /"}';
    }
  }
}
